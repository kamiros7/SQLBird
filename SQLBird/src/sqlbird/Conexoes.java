/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sqlbird;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public final class Conexoes extends javax.swing.JFrame {
    
    DefaultListModel model;
    Connection con;
    Statement stmt;
    ResultSet rs;

    public Conexoes() throws SQLException {
        model = new DefaultListModel();
        initComponents();
        conectar();
        stmt = con.createStatement();
        iniciarLista();
    }
    
    /*Funções para conectar ao banco de dados e para testar conexões*/
    public void conectar(){
        try { 
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/users_connection", "root", "03178964");
        } catch (SQLException ex) {
            /*A excessão informa que a conexão com o banco users_connection falhou.
            O banco users_connection é essencial para o funcionamento do programa
            (da parte das conexões anteriores).*/
            JOptionPane.showMessageDialog(this, "ERRO: A Conexão com banco users_connection não foi encontrada.");
            dispose();
        }
    };
    
    public boolean testaConexao(String url, String usuario, String senha){
        try {
            Connection conAux = DriverManager.getConnection(url, usuario, senha);
            conAux.close();
            return(true);
        } catch (SQLException ex) {
            return(false);
        }
    }
    
    /**
     * Creates new form Conexoes
     */
    
    /*Funções para a manipulação da lista*/
    public void iniciarLista() throws SQLException{
        limparLista();
        rs = stmt.executeQuery("select url, usuario, senha from connection");
        
        while(rs.next()){
            adicionarElemento(rs.getString("url") + " | " + rs.getString("usuario") + " | " + rs.getString("senha") );
        }
    } 
    
    public void limparLista(){
        model.clear();
        jList1.setModel(model);
    }
    
    public void adicionarElemento(String text){
        model.addElement(text); 
        jList1.setModel(model);
    }
    
    public void removerElemento(int index){
        model.remove(index); //retorna a posição do item selecionado.
        jList1.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */ 
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bNovaConexao = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        bConectar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SQLBird - Conexões");
        setResizable(false);

        bNovaConexao.setText("Novo");
        bNovaConexao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bNovaConexaoMouseClicked(evt);
            }
        });
        bNovaConexao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNovaConexaoActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        bConectar.setText("Conectar");
        bConectar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bConectarMouseClicked(evt);
            }
        });
        bConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConectarActionPerformed(evt);
            }
        });

        jLabel1.setText("Conexões anteriores");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 280, Short.MAX_VALUE)
                        .addComponent(bConectar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bNovaConexao, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bNovaConexao, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /*Funções para a manipulação dos botões*/
    private void bNovaConexaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bNovaConexaoMouseClicked
         //new NovaConexao().setVisible(true);
         NewDialog1 dialog = new NewDialog1(this, true);      
         dialog.setVisible(true);
         
         //Nesta parte do código a janela Dialog já fechou... Logo fechamos agora a janela Conexoes
         if(dialog.getConexaoAberta()){ //Verifica se a conexão fornecida pelo usuário é válida
             dispose();                 //Caso for, fecha a janela Conexoes e abre o WorkBench.
             try {
                 con.close();
             } catch (SQLException ex) {
                 /*Falha ao fechar a conexão com o banco users_connection.*/
                 Logger.getLogger(Conexoes.class.getName()).log(Level.SEVERE, null, ex);
             }
             
             WorkBench janelaPrincipal = new WorkBench();
             janelaPrincipal.setVisible(true);
             
             try {
                 janelaPrincipal.setConexao(dialog.getUrl(), dialog.getUsuario(), dialog.getSenha());
             } catch (SQLException ex) {
                 /*A conexão é inválida. Porém nessa parte do código já sabemos que ela é válida. 
                 Logo nunca entrará nesse catch.*/
                 Logger.getLogger(Conexoes.class.getName()).log(Level.SEVERE, null, ex);
             }
         }
    }//GEN-LAST:event_bNovaConexaoMouseClicked

    private void bNovaConexaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNovaConexaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bNovaConexaoActionPerformed

    private void bConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConectarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bConectarActionPerformed

    private void bConectarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bConectarMouseClicked
        /*Separa os campos url, usuario e senha.*/
        String conexao = model.getElementAt(jList1.getSelectedIndex()).toString();
        String url, usuario, senha;
        int posFinalUrl, posFinalUsuario, posFinalSenha; //Posições finais dos campos
        
        
        posFinalUrl = conexao.indexOf("|");
        url = conexao.substring(0, posFinalUrl - 1);
        
        usuario = conexao.substring(posFinalUrl + 2, conexao.length()); //o + 2 é para retirar da String o espaço e a |.
        posFinalUsuario = usuario.indexOf("|");
        usuario = usuario.substring(0, posFinalUsuario - 1);
        
        senha = conexao.substring(posFinalUrl + posFinalUsuario + 4, conexao.length()); //o + 4 é para retirar os espaços inválidos("acumulo erro").

        /*testa a conexão com os campos separados*/
        if(testaConexao(url, usuario, senha)){
            try {
                con.close();
            } catch (SQLException ex) {
                
                Logger.getLogger(Conexoes.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            dispose();
            
            WorkBench janelaPrincipal = new WorkBench();
            janelaPrincipal.setVisible(true);
            
            try {
                janelaPrincipal.setConexao(url, usuario, senha);
            } catch (SQLException ex) {
                /*Conexão inválida. Porém nunca entrará nesse catch, pois a conexão já foi testada.*/
                Logger.getLogger(Conexoes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            /*Se entrou aqui, quer dizer que a conexão do banco users_connection foi alterada de alguma
            forma e não existe mais.*/

            /*Exibe a mensagem de erro.*/
            JOptionPane.showMessageDialog(this, "ERRO: A Conexão selecionada não existe mais.");
            
            /*Abaixo é utilizado um PreparedStatement para excluir a conexão que não existe mais do
            banco users_connection. Na próxima vez que o usuário abrir o programa, a conexão não
            aparecerá mais.*/
            try {
                PreparedStatement pstmt = con.prepareStatement("delete from connection where url = ? and usuario = ? and senha = ?;");
                
                pstmt.setString(1, url);
                pstmt.setString(2, usuario);
                pstmt.setString(3, senha);
                
                pstmt.executeUpdate();
                
            } catch (SQLException ex) {
                /*Falha ao excluir o registro de users_connection*/
                Logger.getLogger(Conexoes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_bConectarMouseClicked

    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bConectar;
    private javax.swing.JButton bNovaConexao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}